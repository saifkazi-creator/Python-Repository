Database is a collection of tabular data.
Suppose we have a dataset of movies with there info like imdb, genre,type,id etc...

#1 SELECT:
SELECT * FROM movies;
here * means all.
so it will give the output as all the data in movies 

#2 WHERE:
SELECT * FROM movies WHERE industry="bollywood";
so output will neglect the data from hollywood.

#3 COUNT
if we want to return the count of bollywood movies 
we use 
SELECT COUNT(*) FROM movies WHERE industry="bollywood";

#4 distinct
SELECT DISTINCT FROM INDUSTRY;
this will give o/p as bollywood 
                      hollywood

#5 LIKE
for example we want all the thor named movies 
we will type 
SELECT * FROM movies WHERE title LIKE "%thor%";
here % means anything can be there before and after thor 
so we will get all the thor related movies.
% is called wild card search

#6 empty set
SELECT * FROM movies WHERE studio=""
"" means empty 

#7 AND 
SELECT * FROM movies WHERE imdb>6 AND imdb<9;

#8 OR
SELECT * FROM movies WHERE year=2020 OR year=2021 OR year=2019;

#9 IN 
SELECT * FROM movies WHERE year IN (2019,2020,2021);
this will give the same o/p as #8
SELECT * FROM movies WHERE studio IN ("Zee Studios");

#10 NULL
SELECT * FROM movies WHERE imdb is NULL;

#11 ORDER BY
arranges data in ascending order
SELECT * FROM movies WHERE industry="bollywood"
ORDER BY imdb;

#12 ASC and DESC
SELECT * FROM movies WHERE industry="bollywood"
ORDER BY imdb DESC;
arranges data in descending order

#13 LIMIT
SELECT * FROM movies WHERE industry="bollywood"
ORDER BY imdb DESC LIMIT 5;
gives top 5 movies with highest imdb ratings

#14 OFFSET
if we want to start with the second highest rating 
SELECT * FROM movies WHERE industry="bollywood"
ORDER BY imdb DESC LIMIT 5 OFFSET 1;
here 1 is the index.

#15 MAX and MIN 
SELECT MAX(imdb) WHERE industry="bollywood";
returns maximun imdb of a bollywood movie 

#16 AVG 
returns average of ratings or anything 
SELECT AVG(imdb) WHERE studio="Marvel Studios";
ans:7.5000
if we want to round it of to 2 decimal points 
SELECT ROUND(AVG(imdb),2) WHERE studio="Marvel Studios";

#17 as
SELECT ROUND(AVG(imdb),2) as avg_reading,
MAX(imdb) as max_reading, MIN(imdb) as min_reading
WHERE studio="Marvel Studios";
this will create the name of average min and max readings.

#18 GROUP BY
it means on what criteria u r grouping things.
SELECT 
industry,count(*)
FROM movies
GROUP BY industry;
o/p:
Hollywood:21
Bollywood:18

###example:
SELECT
studio,count(*) as cnt
FROM movies
GROUP BY studio 
ORDER BY cnt DESC;

isse cnt descending order mei print hoga 

#19 WHERE 
WHERE studio!=""
in this the place where studio is blank will get removed.

#20 ORDER BY
DESC - used for descending order 
ex ORDER BY customer_id DESC;
SELECT--->FROM-->WHERE-->GROUP BY-->HAVING-->ORDER BY

#21 HAVING
SELECT release_year,count(*) as movies_count
FROM movies
GROUP BY release_year
having imdb>2
ORDER BY movies_count DESC

#21 YEAR(CURDATE())
returns the year of date.
if we use CURDATE()
it returns the current date.

kisi ki age nikalni hai to 
SELECT *,YEAR(CURDATE())-birth_year as age FROM actors;

#22 IF condition
IF(condition, if condition is true then what , if conditon is false then what)






#JOIN
SELECT 
m.movie_id,title , budget , revenue , currency , unit
FROM movies m
JOIN financials f
ON m.movie_id=f.movie_id:;

--> INNER JOIN 
It will take the common data between both the tables and display it.
-->LEFT JOIN 
It will take the data of both left and the intersection .
-->RIGHT JOIN
It will take the data of both right and the intersection .
WE will do f.movie_id in the SELECT line.
-->FULL JOIN
It will take the whole data.

In this we use the operation UNION
SELECT 
m.movie_id,title , budget , revenue , currency , unit
FROM movies m
LEFT JOIN financials f
ON m.movie_id=f.movie_id:;

UNION

SELECT 
f.movie_id,title , budget , revenue , currency , unit
FROM movies m
RIGHT JOIN financials f
ON m.movie_id=f.movie_id:;

-->USING
SELECT 
movie_id,title , budget , revenue , currency , unit
FROM movies 
JOIN financials f
USING (movie_id);











